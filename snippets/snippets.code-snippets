{
    "Test (Arrange-Act-Assert)": {
        "prefix": "tt",
        "body": [
            "test('should ', () {",
            "//Arrange - Setup facts, Put Expected outputs or Initilize\n",
            "//Act - Call the function that is to be tested\n",
            "//Assert - Compare the actual result and expected result\n",
            "});"
        ],
        "description": "Define a Unit test"
    },
    "Test Async (Arrange-Act-Assert) with async": {
        "prefix": "tta",
        "body": [
            "test('should ', () async {",
            "//Arrange - Setup facts, Put Expected outputs or Initilize \n",
            "//Act - Call the function that is to be tested\n",
            "//Assert - Compare the actual result and expected result\n",
            "});"
        ],
        "description": "Define a Unit test with async body"
    },
    "Group for testing": {
        "prefix": "grp",
        "body": [
            "group('${1:groupName}', () {",
            "// write tests",
            "});",
        ],
        "description": "Define group for Unit testing",
    },
    "Try On Block": {
        "prefix": "ton",
        "body": [
            "try {",
            "${1:}",
            "} on ${1:exceptionType} {",
            "",
            "}"
        ],
        "description": "Create a try-on block to handle specific exception"
    },
    "Try Catch Block": {
        "prefix": "tc",
        "body": [
            "try { ",
            "${1:}",
            "} catch (exception) {",
            "  print(exception.toString());",
            "}"
        ],
        "description": "Create a try-catch block to use exception object"
    },
    "Try-On-Catch Block": {
        "prefix": "toc",
        "body": [
            "try { ",
            "",
            "} on ${1:exceptionType} {",
            "",
            "} catch(exception) {",
            "  print(exception.toString());",
            "}"
        ],
        "description": "Create a try-on-catch block to handle specific exception and use exception object"
    },
    "Try-On-Catch-Finally Block": {
        "prefix": "tocf",
        "body": [
            "try { ",
            "",
            "} on ${1:exceptiontype} {",
            "",
            "} catch(exception) {",
            "  print(exception);",
            "} finally {",
            "",
            "}",
        ],
        "description": "Create a try-on-catch-finally block"
    },
    "Function definition": {
        "prefix": "fun",
        "body": [
            "${1:returnType} ${2:functionName}(List args) {",
            "return Null;",
            "}"
        ],
        "description": "Define user defined function"
    },
    "Async Function definition": {
        "prefix": "afun",
        "body": [
            "${1:returnType} ${2:functionName}(List args) async {",
            "return Null;",
            "}"
        ],
        "description": "Define a user defined async function"
    },
    "if Block": {
        "prefix": "if",
        "body": [
            "if (${1:}) {",
            "",
            "}"
        ],
        "description": "Create a simple if decision maker"
    },
    "if-else Block": {
        "prefix": "ie",
        "body": [
            "if (${1:}) {",
            "",
            "} else {",
            "",
            "}"
        ],
        "description": "Create an if-else block"
    },
    "1-else-if ladder Block": {
        "prefix": "i1e",
        "body": [
            "if (${1:}) {",
            "",
            "} else if(${2:}) {",
            "",
            "} else {",
            "",
            "}"
        ],
        "description": "One else-if ladder"
    },
    "2-else-if ladder Block": {
        "prefix": "i2e",
        "body": [
            "if (${1:}) {",
            "",
            "} else if(${2:}) {",
            "",
            "} else if(${3:}) {",
            "",
            "} else {",
            "",
            "}"
        ],
        "description": "Two else-if ladder"
    },
    "3-else-if ladder Block": {
        "prefix": "i3e",
        "body": [
            "if (${1:}) {",
            "",
            "} else if(${2:}) {",
            "",
            "} else if(${3:}) {",
            "",
            "} else if(${4:}) {",
            "",
            "} else {",
            "",
            "}"
        ],
        "description": "Three else-if ladder"
    },
    "Class definition": {
        "prefix": "cls",
        "body": [
            "class ${1:} {",
            "\nconst ${1:}();",
            "}",
        ],
        "description": "Define a simple class",
    },
    "Inherited Class definition": {
        "prefix": "cle",
        "body": [
            "class ${1:} extends ${2:} {",
            "\n  const ${1:}();",
            "}",
        ],
        "description": "Define a class which extends another class",
    },
    "Class definition with extends and implements": {
        "prefix": "clei",
        "body": [
            "class ${1:} extends ${2:} implements ${3:}{",
            "\nconst ${1:}();",
            "}",
        ],
        "description": "Define a class which extends another class and implements some classes",
    },
    "For Loop block": {
        "prefix": "for",
        "body": [
            "for ( var ${1:var_name} = ${2:} ; ${1:} ${3:} ; ${1:}${4:} ){",
            "",
            "}"
        ],
        "description": "Create a For-Loop Block",
    },
    "For In Loop  block": {
        "prefix": "fin",
        "body": [
            "for ( var ${1:var_name} in ${2:arry_var} ){",
            "",
            "}"
        ],
        "description": "Create a For_In-Loop Block",
    },
    "while Loop block": {
        "prefix": "while",
        "body": [
            "while( ${1:condition} ){",
            "",
            "}"
        ],
        "description": "Create a While-Loop Block",
    },
    "Do while Loop block": {
        "prefix": "do",
        "body": [
            "do{",
            "",
            "}while( ${1:condition} );",
        ],
        "description": "Create a Do While Loop Block",
    },
    "Ternary Operator":{
        "prefix": "ternary",
        "body": [
            "(${1:}) ? :",
        ],
        "description": "Ternary Operator",
    }
}